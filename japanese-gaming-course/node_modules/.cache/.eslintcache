[{"/home/dan/code/projects/project2/japanese-gaming-course/src/index.js":"1","/home/dan/code/projects/project2/japanese-gaming-course/src/App.js":"2","/home/dan/code/projects/project2/japanese-gaming-course/src/reportWebVitals.js":"3","/home/dan/code/projects/project2/japanese-gaming-course/src/components/Quiz.js":"4","/home/dan/code/projects/project2/japanese-gaming-course/src/components/LessonHub.js":"5","/home/dan/code/projects/project2/japanese-gaming-course/src/components/StudentInfo.js":"6","/home/dan/code/projects/project2/japanese-gaming-course/src/components/Register.js":"7","/home/dan/code/projects/project2/japanese-gaming-course/src/components/Login.js":"8","/home/dan/code/projects/project2/japanese-gaming-course/src/components/MainMenu.js":"9","/home/dan/code/projects/project2/japanese-gaming-course/src/components/PeerGrading.js":"10","/home/dan/code/projects/project2/japanese-gaming-course/src/components/JapaneseLesson.js":"11","/home/dan/code/projects/project2/japanese-gaming-course/src/components/GameCommentary.js":"12","/home/dan/code/projects/project2/japanese-gaming-course/src/components/GameData.js":"13","/home/dan/code/projects/project2/japanese-gaming-course/src/components/QuizAnswers.js":"14","/home/dan/code/projects/project2/japanese-gaming-course/src/components/MainMenuCard.js":"15","/home/dan/code/projects/project2/japanese-gaming-course/src/components/QuizQuestion.js":"16","/home/dan/code/projects/project2/japanese-gaming-course/src/components/StudentInfoQuizHistory.js":"17","/home/dan/code/projects/project2/japanese-gaming-course/src/components/ExtraExample.js":"18","/home/dan/code/projects/project2/japanese-gaming-course/src/components/Screenshot.js":"19","/home/dan/code/projects/project2/japanese-gaming-course/src/components/VocabularyTable.js":"20","/home/dan/code/projects/project2/japanese-gaming-course/src/components/MainPagePic.js":"21"},{"size":591,"mtime":1635032980402,"results":"22","hashOfConfig":"23"},{"size":2674,"mtime":1662832846678,"results":"24","hashOfConfig":"23"},{"size":362,"mtime":1635030366832,"results":"25","hashOfConfig":"23"},{"size":6946,"mtime":1636998126487,"results":"26","hashOfConfig":"23"},{"size":3961,"mtime":1662837643678,"results":"27","hashOfConfig":"23"},{"size":1327,"mtime":1636656701025,"results":"28","hashOfConfig":"23"},{"size":3211,"mtime":1636734031995,"results":"29","hashOfConfig":"23"},{"size":1779,"mtime":1636585585216,"results":"30","hashOfConfig":"23"},{"size":419,"mtime":1662832934648,"results":"31","hashOfConfig":"23"},{"size":5787,"mtime":1638204278955,"results":"32","hashOfConfig":"23"},{"size":1400,"mtime":1635454064755,"results":"33","hashOfConfig":"23"},{"size":701,"mtime":1662836488728,"results":"34","hashOfConfig":"23"},{"size":1080,"mtime":1662835767608,"results":"35","hashOfConfig":"23"},{"size":2564,"mtime":1636140419344,"results":"36","hashOfConfig":"23"},{"size":2661,"mtime":1662835875248,"results":"37","hashOfConfig":"23"},{"size":2278,"mtime":1636134415474,"results":"38","hashOfConfig":"23"},{"size":1601,"mtime":1636134400724,"results":"39","hashOfConfig":"23"},{"size":835,"mtime":1635363094107,"results":"40","hashOfConfig":"23"},{"size":304,"mtime":1636048290675,"results":"41","hashOfConfig":"23"},{"size":702,"mtime":1635630132882,"results":"42","hashOfConfig":"23"},{"size":303,"mtime":1635630124682,"results":"43","hashOfConfig":"23"},{"filePath":"44","messages":"45","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"1t0wepw",{"filePath":"46","messages":"47","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"48"},{"filePath":"49","messages":"50","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"51","messages":"52","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"53"},{"filePath":"54","messages":"55","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"56"},{"filePath":"57","messages":"58","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"59","messages":"60","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"61"},{"filePath":"62","messages":"63","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"64"},{"filePath":"65","messages":"66","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"67","messages":"68","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":1,"source":"69"},{"filePath":"70","messages":"71","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"72","messages":"73","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"74","messages":"75","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"76","messages":"77","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"78"},{"filePath":"79","messages":"80","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"81","messages":"82","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"83"},{"filePath":"84","messages":"85","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"86","messages":"87","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"88","messages":"89","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"90","messages":"91","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"92","messages":"93","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/home/dan/code/projects/project2/japanese-gaming-course/src/index.js",[],"/home/dan/code/projects/project2/japanese-gaming-course/src/App.js",["94"],"import './App.css';\nimport React, {useState, useEffect} from \"react\"\nimport { Route, Switch, useHistory } from \"react-router-dom\"\n//import { lessons } from \"./data/lessons.js\"\nimport MainMenu from \"./components/MainMenu.js\"\nimport LessonHub from \"./components/LessonHub.js\"\nimport Quiz from \"./components/Quiz.js\"\nimport Login from \"./components/Login.js\"\nimport Register from \"./components/Register.js\"\nimport StudentInfo from \"./components/StudentInfo.js\"\nimport PeerGrading from \"./components/PeerGrading.js\"\n\nfunction App() {\n\n  //json calls\n  //app, login, register\n\n  const url=\"http://localhost:2500/users/\"\n  const lessonsurl = \"http://127.0.0.1:3000/lessons\"\n\n  let history = useHistory();\n  let [loggedIn, setLoggedIn] = useState(false)\n  let [user, setUser] = useState({quizzes: []})\n  let [lessons, setLessons] = useState([])\n  let [titles, setTitles] = useState([])\n\n  if (!loggedIn) { history.push(\"/login\")}\n  \n\n  function getUserInfo(getUser) {\n    setLoggedIn(true)\n    setUser({...getUser})\n    history.push(\"/\")\n    console.log(getUser)\n  }\n\n\n\n\nfunction updateUserInfo(updatedUser) {\n  setUser({...updatedUser})\n}\n\n\n\nfunction massacre() {\n // console.log(user)\n //fetch(\"http://localhost:2500/users/4\", {method: 'DELETE'})\n history.push('/peer')\n}\n\n\nuseEffect(() => {\n  fetch(lessonsurl)\n  .then(res => res.json())\n  .then(data => {\n    setLessons(data)\n    makeLessons(data)\n})\n}, [])\n\n\nfunction makeLessons(lessons) {\n  setLessons(lessons)\n  //console.log(lessons)\n\n  setTitles( \n        lessons.map(i => { return {\n        id: i.id,\n        title: i.title,\n        isGame: i.isgame,\n        cover: i.cover.front,\n        shortDescription: i.japanesesection.shortdescription\n      }\n\n  }))\n\n}\n\n  return (\n    <div className=\"top\">\n      <p className=\"centeredText\">Dan's Japanese Page</p>\n    <Switch>\n      <Route exact path=\"/\">\n          <MainMenu titles = {titles} paidHowFar={user.paidHowFar*5} user={user} />\n      </Route>\n      <Route path=\"/lesson/:id\">\n          <LessonHub lessons = {lessons} />\n      </Route>\n      <Route path=\"/quiz/:id\">\n          <Quiz lessons={lessons} userName={user.userName} url={url} userId={user.id} user={user} updateUserInfo={updateUserInfo} />\n      </Route>\n      <Route path=\"/login\">\n          <Login url ={url} getUserInfo={getUserInfo} />\n      </Route>\n      <Route path=\"/register\">\n        <Register url={url} />\n      </Route>\n\n      <Route path=\"/peer\">\n        <PeerGrading url={url} currentUser={user}/>\n      </Route>\n    </Switch>\n    \n    <Switch>\n    <Route exact path=\"/\">\n      <StudentInfo loggedIn={loggedIn} user={user}/>\n    </Route>\n    </Switch>\n\n\n    </div>\n  );\n}\n\nexport default App;\n","/home/dan/code/projects/project2/japanese-gaming-course/src/reportWebVitals.js",[],"/home/dan/code/projects/project2/japanese-gaming-course/src/components/Quiz.js",["95","96"],"import React, { useEffect, useState } from \"react\"\nimport './styles/Quiz.css'\nimport { useParams, NavLink } from \"react-router-dom\"\nimport QuizQuestion from \"./QuizQuestion.js\"\nimport QuizAnswers from \"./QuizAnswers.js\"\n\nfunction Quiz({lessons, userName, url, userId, user, updateUserInfo}) {\n\n    let userUrl = url+userId\n    //console.log(userUrl)\n    \n    const params = useParams()\n    let quizData = lessons.find(i => { return i.id === parseInt(params.id) * 5 }).quizData\n    let noOfQuestions = quizData.multipleChoiceQuestions.length + quizData.openEndedQuestions.length\n\n    let [questionNumber, setQuestionNumber] = useState(1)\n    let [useKanji, setUseKanji] = useState(true)\n    let [questionType, setQuestionType] = useState(\"multipleChoiceQuestions\")\n    let [questionData, setQuestionData] = useState(quizData.multipleChoiceQuestions[0])\n    let [answers, setAnswers] = useState([])\n    let [quizGoingOn, setQuizGoingOn] = useState(true)\n\n    let mcAnswers = quizData.multipleChoiceQuestions.map(i => i.correctChoice)\n\n    useEffect( () => {\n        let tempAns=[]\n        for(let i=0; i < noOfQuestions; i++) { tempAns.push(null) }\n        setAnswers([...tempAns])\n    }, [])\n\n   \n    function handleChange(answer) {\n\n        let tempAnswer=[...answers]\n        \n\n        if ( questionType === \"multipleChoiceQuestions\") {\n            let oldChoice = document.querySelectorAll(\".chosen\")\n            \n            if (oldChoice.length !== 0) {\n                for (let i of oldChoice) {\n                    i.className = \"unchosen\"\n                }\n            }\n            answer.target.className=\"chosen\"\n            tempAnswer[questionNumber-1] = answer.target.id\n         }\n\n        else { \n            tempAnswer[questionNumber-1] = answer\n        }\n\n        console.log(tempAnswer)\n        setAnswers([...tempAnswer])\n    }\n\n    function changeKanji(){\n        setUseKanji(!useKanji)\n    }\n\n    function goBack(){\n        if (questionNumber !== 1) { setQuestionNumber(questionNumber - 1) }\n        clearAnswers()\n    }\n\n    function goForward(){\n        if (questionNumber !== noOfQuestions) { setQuestionNumber(questionNumber + 1) }\n        clearAnswers()\n    }\n\n    function clearAnswers() {\n        console.log(answers)\n\n        if ( questionType === \"multipleChoiceQuestions\") {\n            let oldChoice = document.querySelectorAll(\".chosen\")\n            \n            if (oldChoice.length !== 0) {\n                for (let i of oldChoice) {\n                    i.className = \"unchosen\"\n                }\n            }\n        \n\n\n         }\n\n         else {\n            let answerBox = document.querySelector(\"#box\")\n            answerBox.value=\"\"\n         }\n    }\n\n    useEffect(() => {\n        \n        if (questionNumber > (quizData.multipleChoiceQuestions.length)) { \n            setQuestionType(\"openEndedQuestions\") \n            let quesNo = questionNumber - quizData.multipleChoiceQuestions.length\n            setQuestionData(quizData.openEndedQuestions[quesNo-1])\n        }\n        else { \n            setQuestionType(\"multipleChoiceQuestions\")\n            setQuestionData(quizData.multipleChoiceQuestions[questionNumber-1])\n         }\n    }, [questionNumber])\n\n\n\n\n\n    function gradeQuiz() {\n        let right=0\n        let ques=\"question\"\n        for (let i=0; i < quizData.multipleChoiceQuestions.length; i++) {\n            if (mcAnswers[i] === answers[i]) { right += 1 }\n        }\n        if (right > 1) { ques += \"s\" }\n        if (right === 0) { ques += \"s\" }\n        let gradeSpiel = `You got ${right} ${ques} right out of ${quizData.multipleChoiceQuestions.length}. That's ${right/quizData.multipleChoiceQuestions.length*100}%`\n        document.querySelector(\"#grade\").innerHTML=gradeSpiel\n\n        let freeResp = quizData.openEndedQuestions.map( (i, qno) => { return (\n           {\n                userName: userName,\n                id: [quizData.quizNo, qno+1],\n                question: i,\n                answer: answers[quizData.multipleChoiceQuestions.length+qno],\n                noOfPeerGrades: 0,\n                correctPeerGrades: 0\n           }\n        )\n        })\n\n\n\n\n        let quizzes = {...user.quizzes}\n\n\n        quizzes[\"quiz\"+params.id] = {\n            \n                \n                \n                id: quizData.quizNo,\n                mcScore: Math.floor(right/quizData.multipleChoiceQuestions.length*100),\n                freeResponse: freeResp\n                }\n            \n          \n          user.canBeGraded = false\n          let fullquizzes = {...user, quizzes}\n          \n      // console.log(user)\n        \n       fetch(userUrl, {\n           method: 'PATCH',\n           headers: {'Content-Type': 'application/json'},\n           body: JSON.stringify(fullquizzes)\n       })\n       .then(res => res.json())\n       .then(data => {\n        updateUserInfo(data)\n        setQuizGoingOn(!quizGoingOn)\n       })\n\n    }\n    // <p className=\"centeredText\">Question {questionNumber} of {noOfQuestions}</p>\n\n    let questionComponent = <QuizQuestion questionData={questionData} useKanji={useKanji} questionType={questionType} questionNumber={questionNumber} handleChange={handleChange} answers={answers} />\n    let backButton = <div><br /><button onClick={goBack}>Previous Question</button></div>\n    let submitButton = <div><br /><button className=\"inputBox\"  onClick={gradeQuiz}>Let's Get this Baby Graded!</button></div>\n    let nextButton = <div><br /><button onClick={goForward}>Next Question</button></div>\n    let kanjiButton = (\n            <div>\n                <br />\n                {useKanji ? <button onClick={changeKanji}>Get rid of the Kanji</button> : <button onClick={changeKanji}>Show me the Kanji</button>}\n            </div>\n    )\n    let backToMenuButton = (\n        <div>\n            <br />\n                <NavLink to=\"../../\">\n                    <button>Return to Main Menu</button>\n                </NavLink>\n        </div>\n    )\n\n    let quizAnswers = (\n        <div>\n            <QuizAnswers answers={answers} quizData={quizData} useKanji={useKanji}/>\n        </div>\n    )\n\n\n\n    function setgoingOn(){\n        setQuizGoingOn(!quizGoingOn)\n    }\n\n\n\n    return (\n        <div className=\"quizPage\">\n            <div className=\"questionNumber\">{quizGoingOn ? kanjiButton : quizAnswers}</div>\n\n            \n\n            <div className=\"kanjiKanaButton\">{quizGoingOn ? backToMenuButton : null}</div>\n\n\n            <div className=\"quizQuestion\">\n                {quizGoingOn ? questionComponent : null}\n            </div>\n\n            <div className=\"backButton\">{quizGoingOn ? backButton : null}</div>\n            <div className=\"submitButton\">{quizGoingOn ? submitButton : null}</div>\n            <div className=\"nextButton\">{quizGoingOn ? nextButton : null}</div>\n\n\n\n\n\n            <div className=\"middleForDev\" onClick={setgoingOn}>\n                <p className=\"centeredText\" id=\"grade\"></p>\n            </div>\n\n        </div>\n    )\n}\n\nexport default Quiz","/home/dan/code/projects/project2/japanese-gaming-course/src/components/LessonHub.js",["97","98"],"import React, {useState, useEffect} from \"react\";\nimport GameData from \"./GameData.js\"\nimport GameCommentary from \"./GameCommentary.js\"\nimport JapaneseLesson from \"./JapaneseLesson.js\"\nimport './styles/Lesson.css';\nimport { useParams, NavLink, Switch, Route } from \"react-router-dom\"\n\nfunction LessonHub({lessons}) {\n\n    const [lesson, setLesson] = useState({})\n    const [sendToGameData, setSendToGameData] = useState(null)\n    const [sendToCommentary, setSendToCommentary] = useState(null)\n    const [sendToJapaneseLesson, setSendToJapaneseLesson] = useState(null)\n\n    const params=useParams()\n    const lessonsurl = \"http://127.0.0.1:3000/lessons/\" + params.id\n\n    useEffect(() => {\n        fetch(lessonsurl)\n        .then(res => res.json())\n        .then(data => {\n            console.log(data)\n            formatSendToGameData(data)\n            formatSendToCommentary(data)\n            formatSendToJapaneseLesson(data)\n        })\n      }, [])\n\n\n      function formatSendToGameData(data) {\n        let pics = ({ \n            front: data.cover.front,\n            back: data.cover.back,\n            titlescreen: data.cover.titlescreen,\n            otherPics: data.otherpics\n        })\n      setLesson(data)\n\n      let info = ({\n        title: data.title,\n        releases: data.releases\n      })\n\n      setSendToGameData({\n        pics: pics,\n        info: info\n      })\n      }\n\n      function formatSendToCommentary(data) {\n        let gameCopy = data.paragraphs.map((i) => i.text )\n        setSendToCommentary({\n            gameCopy: gameCopy,\n            screenshots: data.screenshots\n        })\n        \n      }\n\n      function formatSendToJapaneseLesson(data) {\n\n\n        setSendToJapaneseLesson({\n            lessonTitle: data.japanesesection.lessontitle,\n            shortDescription: data.japanesesection.shortdescription,\n            howToMake: data.howtomakes.map(i => i.text),\n            screenshot: data.japanesesection.screenshot,\n            mainCopy: data.japanesecopyparagraphs.map(i => i.text),\n            mainExample: data.examples[0],\n            extraExamples: data.examples.slice(1,),\n            vocabulary: data.vocabwords.map(i => [i.kanji, i.nokanji, i.english])\n        })\n\n      }\n      \n    \n\n    //let lesson = lessons.find(i => { return i.id === parseInt(params.id) })\n    let mainLink=`/lesson/${params.id}/main`\n    let gameLink=`/lesson/${params.id}/game`\n    let japaneseLink=`/lesson/${params.id}/japanese`\n\n    // <GameData pics={pics} info={info}/>\n\n    return(\n        <div className=\"hub\">\n            <div className=\"mainInfo\">\n            <p className=\"centeredText\">\n                  <NavLink to={mainLink}>Front Page</NavLink>\n                </p>\n            </div>\n            <div className=\"linkToGame\">\n            <p className=\"centeredText\">\n                  <NavLink to={gameLink}>Game Commentary</NavLink>\n                </p>\n            </div>\n            <div className=\"linktoJapanese\">\n            <p className=\"centeredText\">\n            <NavLink to={japaneseLink}>Japanese Lesson</NavLink>\n                </p>\n            </div>\n            <div className=\"linkBack\">\n            <p className=\"centeredText\">\n                <NavLink to=\"../../\">Back</NavLink>\n                </p>\n            </div>\n\n           \n            <div className=\"theLesson\">\n                \n                <Switch>\n                    <Route path={mainLink}>\n                      {sendToGameData &&  <GameData sentData={sendToGameData}/> }\n                    </Route>\n                    <Route path={gameLink}>\n                      {sendToCommentary && <GameCommentary sentData={sendToCommentary}/> }\n                    </Route>\n                    <Route path={japaneseLink}>\n                      {sendToJapaneseLesson && <JapaneseLesson japaneseCopy={sendToJapaneseLesson}/> }\n                    </Route>\n\n                </Switch>\n            </div> \n        </div> \n    )\n}\n\nexport default LessonHub","/home/dan/code/projects/project2/japanese-gaming-course/src/components/StudentInfo.js",[],"/home/dan/code/projects/project2/japanese-gaming-course/src/components/Register.js",["99"],"import React, {useState, useEffect} from \"react\"\nimport {useHistory, NavLink} from \"react-router-dom\"\nimport './styles/Quiz.css'\n\nimport './styles/MainMenu.css'\n\nfunction Register({url}) {\n\n    let history = useHistory()\n\n    let [formData, setFormData] = useState({\n        userName: \"\",\n        password1: \"\",\n        password2: \"\",\n        email: \"\",\n    })\n\n    function handleChange(e) {\n        setFormData({\n            ...formData,\n            [e.target.id]: e.target.value})\n    }\n\n\n\n\n    function registerUser(e) {\n        e.preventDefault()\n        \n        if (formData.password1 !== formData.password2) { \n            document.querySelector(\"#errorMessage\").innerHTML=\"Passwords Don't Match.\"\n            return 0\n        }\n\n        if (formData.userName.length === 0) { \n            document.querySelector(\"#errorMessage\").innerHTML=\"User Name Can't Be Empty.\"\n            return 0\n        }\n\n        if (formData.password1.length === 0) { \n            document.querySelector(\"#errorMessage\").innerHTML=\"Password Can't Be Empty.\"\n            return 0\n        }\n\n        if (formData.email.length === 0) { \n            document.querySelector(\"#errorMessage\").innerHTML=\"Email Address Can't Be Empty.\"\n            return 0\n        }\n\n        fetch(url)\n        .then(res => res.json())\n        .then(data => {\n            let check=data.find(i => i.userName === formData.userName)\n           if (check !== undefined) { \n            document.querySelector(\"#errorMessage\").innerHTML=\"User already exists. Please choose another user name.\"\n            return 0\n        }\n\n        document.querySelector(\"#errorMessage\").innerHTML=\"\"\n\n        let userData = {\n            userName: formData.userName,\n            password: formData.password2,\n            email: formData.email,\n            paidHowFar: 1,\n            canBeGraded: true,\n            quizzes: [\n              \n            ]\n          }\n\n\n\n          \n        fetch(url, {\n          method: 'POST',\n          headers: { \n            'Content-Type': 'application/json',\n            accept: 'application/json' \n          },\n          body: JSON.stringify(userData)\n        })\n        .then(history.push(\"/login/\"))\n\n\n\n\n\n\n        })\n\n      \n        \n\n        \n\n        \n\n\n    }\n\n    // \n\n\n    return(\n        <div>\n            <h1 className=\"centeredText\">Registration Page</h1>\n            <p className=\"error\" id=\"errorMessage\"></p>\n            <form>\n                <p className=\"centeredText\">User Name: <input id=\"userName\" onChange={e => handleChange(e)} /></p>\n                <p className=\"centeredText\">Email Address: <input id=\"email\" onChange={e => handleChange(e)} /></p>\n                <p className=\"centeredText\">Password: <input id=\"password1\" type=\"password\" onChange={e => handleChange(e)} /></p>\n                <p className=\"centeredText\">Password: <input id=\"password2\" type=\"password\" onChange={e => handleChange(e)} /></p>\n                <NavLink to=\"/login\"><p className=\"centeredText\"><button>Back</button></p></NavLink>\n                <p className=\"centeredText\"><button onClick={e => registerUser(e)}>Register</button></p>\n                <br />\n            </form>\n        </div>\n    )\n}\n\nexport default Register","/home/dan/code/projects/project2/japanese-gaming-course/src/components/Login.js",["100","101","102"],"import React, {useState, useEffect} from \"react\"\nimport './styles/MainMenu.css'\nimport { NavLink, Switch, useHistory } from \"react-router-dom\"\n\nfunction Login({url, getUserInfo}) {\n\n    \n    let [up, setUp] = useState({\n        userName: \"\",\n        password: \"\"\n    })\n\n    function handleChange(e){\n        setUp({\n            ...up,\n            [e.target.id]: e.target.value \n        })\n\n    }\n\n\n\n    function tryToLogIn(e){\n        e.preventDefault()\n        fetch(url)\n        .then(res => res.json())\n        .then( data => {\n        //    console.log(data)\n          let getUser = data.find(i => i.userName === up.userName)\n        //    console.log(getUser)\n            if (getUser === undefined) {\n                document.querySelector(\"#errorMessage\").innerHTML = \"User Not Found\"\n                return 0\n            }\n            if (getUser.password !== up.password) {\n                document.querySelector(\"#errorMessage\").innerHTML = \"Password Wrong\"\n                return 0\n            }\n            getUserInfo(getUser)\n        })\n\n    }\n\n\n    return (\n    <div>\n        <h1 className=\"centeredText\">Japanese through JRPGs</h1>\n        <h2 className=\"centeredText\">Login</h2>\n        <p className=\"error\" id=\"errorMessage\"></p>\n        <form>\n        <p className=\"centeredText\">User Name: <input id=\"userName\" onChange={e => handleChange(e)} /></p>\n        <p className=\"centeredText\">Password: <input id=\"password\" type=\"password\" onChange={e => handleChange(e)} /></p>\n        \n        <p className=\"centeredText\"><button onClick={e => tryToLogIn(e)}>Login</button></p>\n        </form>\n        <NavLink to=\"/register\"><p className=\"centeredText\"><button>Register</button></p></NavLink>\n        <br />\n        <br />\n    </div>\n    )\n}\n\nexport default Login","/home/dan/code/projects/project2/japanese-gaming-course/src/components/MainMenu.js",[],"/home/dan/code/projects/project2/japanese-gaming-course/src/components/PeerGrading.js",["103","104","105","106"],"import React, { useEffect, useState } from \"react\"\nimport { useHistory } from \"react-router-dom\"\n\nfunction PeerGrading({url, currentUser}) {\n\n    \n\n    const history = useHistory()\n\n    console.log(currentUser, url)\n    let usersQuiz\n    let frQuestions = []\n    let useTheseQuestions = []\n    let allUsers\n    let [data, setData] = useState(null)\n\n    useEffect(() => {\n    fetch(url)\n        .then(res => res.json())\n        .then(dat => setData(dat))\n        }, [])\n\n\n        function gatherQuestions() {\n            allUsers = data\n            usersQuiz = Object.keys(currentUser.quizzes).length\n            usersQuiz -= 1\n            if (usersQuiz === 0) { usersQuiz = 1 }\n            \n            for (let user of data) {\n               if(!user.canBeGraded) { continue }\n                 for (let quiz in user.quizzes) {\n                     for (let frQuestion of user.quizzes[quiz].freeResponse) {\n                        if (frQuestion.noOfPeerGrades < 5 && frQuestion.id[0] === usersQuiz && frQuestion.answer !== null) { frQuestions.push(frQuestion) }\n                        frQuestions = frQuestions.filter(i => i.userName !== currentUser.userName)\n                        \n                     }\n                 }\n            }\n            \n            for (let i = 0; i < 7; i++){\n                let rando = (Math.floor(Math.random() * frQuestions.length))\n                if (useTheseQuestions.includes(frQuestions[rando]) || (frQuestions. noOfPeerGrades >= 5)) {\n                    i-=1\n                    continue\n                 }\n                 useTheseQuestions.push(frQuestions[rando])\n            }\n\n            return useTheseQuestions\n        }\n\n\n\n        \n    function processData() {\n \n            \n            return gatherQuestions().map((i, j) => { \n                //let name = \"peerGrade\" + j\n                //console.log(name)\n                return ( \n                        <div className=\"peerGrading\">\n                            <div className=\"peerQuestion\">\n                                <p>Question: {i.question}</p>\n                                <p>Student's Answer: {i.answer}</p>\n                            </div>\n                             <div className=\"peerQuestionChoice\" id={j}>\n                             <form className=\"selectionForm\" >\n                                <input type=\"radio\" value=\"Correct\" name=\"a\" name=\"a\" id=\"correct\" /> Correct<br />\n                                <input type=\"radio\" value=\"Incorrect\" name=\"a\" id=\"incorrect\" /> Incorrect<br />\n                                <input type=\"radio\" value=\"Skip\" name=\"a\" id=\"skip\" /> Skip\n                             </form>\n                             </div>\n                          </div>\n                )})\n\n                    \n                \n                    \n\n            }\n\n\n\n\n        function sumbitForms(e) {\n                e.preventDefault()\n                let eachChoice=[]\n                const choices = document.querySelectorAll(\".selectionForm input\")\n                let arrayOfRadios = [...choices]\n                let i = 0\n                while (arrayOfRadios[2]) {\n                    if (arrayOfRadios[0].checked === true) { eachChoice.push(\"Correct\") }\n                    else if (arrayOfRadios[1].checked === true) { eachChoice.push(\"Incorrect\") }\n                    else if (arrayOfRadios[2].checked === true) { eachChoice.push(\"skipped\") }\n                    else { eachChoice.push(\"skipped\") }\n                    arrayOfRadios.shift()\n                    arrayOfRadios.shift()\n                    arrayOfRadios.shift()\n                    i+=3\n                }\n                \n\n                for (let i = 0; i < useTheseQuestions.length; i++) { update(eachChoice, i) }\n\n                currentUser.canBeGraded = true\n                let currentUrl = url + currentUser.id\n\n                patch(currentUrl, currentUser, true)\n            }\n\n    \n            function update(eachChoice, i) {\n                \n                const questionBeingGraded = useTheseQuestions[i]\n                const questionUser = allUsers.find(i => i.userName === questionBeingGraded.userName )\n                const currentUrl = url + questionUser.id\n                const whichQuiz = 'quiz' + questionBeingGraded.id[0]\n                \n                if (eachChoice[i] !== \"skipped\") {questionUser[\"quizzes\"][whichQuiz][\"freeResponse\"][questionBeingGraded.id[1]-1][\"noOfPeerGrades\"] += 1}\n                if (questionUser[\"quizzes\"][whichQuiz][\"freeResponse\"][questionBeingGraded.id[1]-1][\"noOfPeerGrades\"] > 5) { questionUser[\"quizzes\"][whichQuiz][\"freeResponse\"][questionBeingGraded.id[1]-1][\"noOfPeerGrades\"] = 5 }\n                else {\n                    if (eachChoice[i] === \"Correct\") { questionUser[\"quizzes\"][whichQuiz][\"freeResponse\"][questionBeingGraded.id[1]-1][\"correctPeerGrades\"] += 1 }\n                }\n\n                patch(currentUrl, questionUser)\n            }\n\n\n\n\n\n\n            function patch(url, whatToPut, send=false) {\n                fetch (url, {\n                    method: 'PATCH',\n                    headers: {'content-type': 'application/json'},\n                    body: JSON.stringify(whatToPut)\n                })\n                .then(() => {\n                    if (send) { history.push(\"../\")}\n            })\n        }\n\n\n\n\n\n        return(\n            <div>\n                    {data && processData()}\n                     <br />\n                     <button onClick={sumbitForms} className=\"submitButton\">Submit</button>\n                     <button onClick={update} className=\"submitButton\">Update</button>\n                     <p className=\"error\"></p>\n                <br />\n                <br />\n                <br />\n            </div>\n)\n\n}\n\n\nexport default PeerGrading","/home/dan/code/projects/project2/japanese-gaming-course/src/components/JapaneseLesson.js",[],"/home/dan/code/projects/project2/japanese-gaming-course/src/components/GameCommentary.js",[],"/home/dan/code/projects/project2/japanese-gaming-course/src/components/GameData.js",[],"/home/dan/code/projects/project2/japanese-gaming-course/src/components/QuizAnswers.js",["107","108"],"import React, { useEffect, useState } from \"react\"\nimport { useHistory } from \"react-router-dom\"\n\nfunction QuizAnswers({answers, mcAnswers, quizData, allQuestions, useKanji}) {\n\n    let history = useHistory()\n\n    let kanji\n    if (useKanji) {kanji = 0}\n    if (!useKanji) {kanji = 1}\n    let howManyMC = quizData.multipleChoiceQuestions.length\n\n    //console.log(answers)\n\n    let multiplechoiceAnswers = quizData.multipleChoiceQuestions.map((i, place) => {\n        let rightAnswer\n        let yourAnswer\n        if (i.correctChoice === \"A\") { rightAnswer = i.choices[0][kanji] }\n        if (i.correctChoice === \"B\") { rightAnswer = i.choices[1][kanji] }\n        if (i.correctChoice === \"C\") { rightAnswer = i.choices[2][kanji] }\n        if (i.correctChoice === \"D\") { rightAnswer = i.choices[3][kanji] }\n\n        if (answers[place] === \"A\") { yourAnswer = i.choices[0][kanji] }\n        if (answers[place] === \"B\") { yourAnswer = i.choices[1][kanji] }\n        if (answers[place] === \"C\") { yourAnswer = i.choices[2][kanji] }\n        if (answers[place] === \"D\") { yourAnswer = i.choices[3][kanji] }\n        if (answers[place] === null) { yourAnswer = \"Not Attempted\" }\n\n        let rightSpiel\n        if (rightAnswer === yourAnswer) { rightSpiel = \"Correct! Excellent job!\"}\n        else if (yourAnswer === \"Not Attempted\") { rightSpiel = \"\" }\n        else { rightSpiel = \"Sorry, that's not right. Look at the right answer and see if you can see why it's right.\"}\n\n        return(\n        <div>\n            <p id={place+1}>Question {place + 1}: {i.Question}<br />\n            Correct Answer: {rightAnswer}<br />\n            Your Answer: {yourAnswer}<br />\n            {rightSpiel}\n            </p>\n        </div>\n    )})\n\n    let openQuestions = quizData.openEndedQuestions.map((i, place) => {\n        return(\n            <div>\n                <p key={howManyMC + place + 1}>Question {howManyMC + place + 1}: {i}<br />\n\n            Your Answer: {answers[howManyMC+place]}\n            </p>\n            </div>\n        )\n    })\n\n    function toMenu() {\n        history.push(\"../../\")\n    }\n\n    return(\n        <div>\n            <button onClick={toMenu}>Return to Main Menu</button>\n            <br />\n            <br />\n            {multiplechoiceAnswers}\n            {openQuestions}\n            \n            The open ended questions are peer graded. Once you've graded enough questions for others, fellow Japanese learners will grade your questions. Keep an eye on your quiz info below for more info.\n            \n        </div>\n    )\n}\n\n\nexport default QuizAnswers","/home/dan/code/projects/project2/japanese-gaming-course/src/components/MainMenuCard.js",[],"/home/dan/code/projects/project2/japanese-gaming-course/src/components/QuizQuestion.js",["109"],"import React, { useEffect } from \"react\"\nimport './styles/Quiz.css'\n\nfunction QuizQuestion({questionData, useKanji, questionType, questionNumber, handleChange, answers}) {\n\n    let choices\n\n    if ( questionType === \"multipleChoiceQuestions\") {\n        if (useKanji) { choices = questionData.choices.map(i => i[0]) }\n        if (!useKanji) { choices = questionData.choices.map(i => i[1]) }\n\n       \n\n\n    }\n\n\n    function restoreMultipleChoice() {\n        if (answers[questionNumber-1] !== null) {\n            let previouslyChosen = document.querySelectorAll(`#${answers[questionNumber-1]}`)\n            \n            for (let i of previouslyChosen) {\n                i.className = \"chosen\"\n            }\n        }\n    }\n\n\n\n    function restoreAnswer() {\n        console.log(\"A\")\n        if (answers[questionNumber-1] !== null) {\n            let box = document.querySelector(\"#box\")\n            box.value=answers[questionNumber-1]\n        }\n\n    }\n\n\n    useEffect(() => {\n        if ( questionType === \"multipleChoiceQuestions\") { restoreMultipleChoice() }\n        else { restoreAnswer() }\n\n\n    }, [questionNumber])\n\n\n\n    if (questionType === \"multipleChoiceQuestions\") {\n    return(\n        <div className=\"questionDiv\">\n            <h3 className=\"centeredText\">{questionNumber}. {questionData.Question}</h3>\n            <div id=\"A\" className=\"unchosen\" onClick={e => handleChange(e)} >\n                <p id=\"A\">Ａ。{choices[0]}</p>\n            </div>\n\n            <div id=\"B\" className=\"unchosen\" onClick={e => handleChange(e)} >\n                <p id=\"B\">Ｂ。{choices[1]}</p>\n            </div>\n\n            <div id=\"C\" className=\"unchosen\" onClick={e => handleChange(e)} >\n                <p id=\"C\">Ｃ。{choices[2]}</p>\n            </div>\n\n            <div id=\"D\" className=\"unchosen\" onClick={e => handleChange(e)} >\n                <p id=\"D\">Ｄ。{choices[3]}</p>\n            </div>\n            <br />\n        </div>\n    )\n    }\n\n\n\n\n\n    else {\n            return(\n                <div>\n                    <h3 className=\"centeredText\">{questionNumber}. {questionData}</h3>\n                    <input className=\"inputBox\" id =\"box\" onChange={e => handleChange(e.target.value)} />\n                </div>\n            )\n        }\n    \n\n}\n\nexport default QuizQuestion","/home/dan/code/projects/project2/japanese-gaming-course/src/components/StudentInfoQuizHistory.js",[],"/home/dan/code/projects/project2/japanese-gaming-course/src/components/ExtraExample.js",[],"/home/dan/code/projects/project2/japanese-gaming-course/src/components/Screenshot.js",[],"/home/dan/code/projects/project2/japanese-gaming-course/src/components/VocabularyTable.js",[],"/home/dan/code/projects/project2/japanese-gaming-course/src/components/MainPagePic.js",[],{"ruleId":"110","severity":1,"message":"111","line":46,"column":10,"nodeType":"112","messageId":"113","endLine":46,"endColumn":18},{"ruleId":"114","severity":1,"message":"115","line":29,"column":8,"nodeType":"116","endLine":29,"endColumn":10,"suggestions":"117"},{"ruleId":"114","severity":1,"message":"118","line":104,"column":8,"nodeType":"116","endLine":104,"endColumn":24,"suggestions":"119"},{"ruleId":"110","severity":1,"message":"120","line":10,"column":12,"nodeType":"112","messageId":"113","endLine":10,"endColumn":18},{"ruleId":"114","severity":1,"message":"121","line":27,"column":10,"nodeType":"116","endLine":27,"endColumn":12,"suggestions":"122"},{"ruleId":"110","severity":1,"message":"123","line":1,"column":26,"nodeType":"112","messageId":"113","endLine":1,"endColumn":35},{"ruleId":"110","severity":1,"message":"123","line":1,"column":26,"nodeType":"112","messageId":"113","endLine":1,"endColumn":35},{"ruleId":"110","severity":1,"message":"124","line":3,"column":19,"nodeType":"112","messageId":"113","endLine":3,"endColumn":25},{"ruleId":"110","severity":1,"message":"125","line":3,"column":27,"nodeType":"112","messageId":"113","endLine":3,"endColumn":37},{"ruleId":"114","severity":1,"message":"126","line":21,"column":12,"nodeType":"116","endLine":21,"endColumn":14,"suggestions":"127"},{"ruleId":"128","severity":1,"message":"129","line":43,"column":72,"nodeType":"130","messageId":"131","endLine":43,"endColumn":99,"fix":"132"},{"ruleId":"133","severity":1,"message":"134","line":70,"column":78,"nodeType":"135","messageId":"136","endLine":70,"endColumn":86},{"ruleId":"110","severity":1,"message":"137","line":101,"column":21,"nodeType":"112","messageId":"113","endLine":101,"endColumn":22},{"ruleId":"110","severity":1,"message":"123","line":1,"column":17,"nodeType":"112","messageId":"113","endLine":1,"endColumn":26},{"ruleId":"110","severity":1,"message":"138","line":1,"column":28,"nodeType":"112","messageId":"113","endLine":1,"endColumn":36},{"ruleId":"114","severity":1,"message":"139","line":45,"column":8,"nodeType":"116","endLine":45,"endColumn":24,"suggestions":"140"},"no-unused-vars","'massacre' is defined but never used.","Identifier","unusedVar","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'noOfQuestions'. Either include it or remove the dependency array.","ArrayExpression",["141"],"React Hook useEffect has missing dependencies: 'quizData.multipleChoiceQuestions' and 'quizData.openEndedQuestions'. Either include them or remove the dependency array.",["142"],"'lesson' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'lessonsurl'. Either include it or remove the dependency array.",["143"],"'useEffect' is defined but never used.","'Switch' is defined but never used.","'useHistory' is defined but never used.","React Hook useEffect has a missing dependency: 'url'. Either include it or remove the dependency array.",["144"],"no-whitespace-before-property","Unexpected whitespace before property noOfPeerGrades.","MemberExpression","unexpectedWhitespace",{"range":"145","text":"146"},"react/jsx-no-duplicate-props","No duplicate props allowed","JSXAttribute","noDuplicateProps","'i' is assigned a value but never used.","'useState' is defined but never used.","React Hook useEffect has missing dependencies: 'questionType', 'restoreAnswer', and 'restoreMultipleChoice'. Either include them or remove the dependency array.",["147"],{"desc":"148","fix":"149"},{"desc":"150","fix":"151"},{"desc":"152","fix":"153"},{"desc":"154","fix":"155"},[1456,1458],".",{"desc":"156","fix":"157"},"Update the dependencies array to be: [noOfQuestions]",{"range":"158","text":"159"},"Update the dependencies array to be: [questionNumber, quizData.multipleChoiceQuestions, quizData.openEndedQuestions]",{"range":"160","text":"161"},"Update the dependencies array to be: [lessonsurl]",{"range":"162","text":"163"},"Update the dependencies array to be: [url]",{"range":"164","text":"165"},"Update the dependencies array to be: [questionNumber, questionType, restoreAnswer, restoreMultipleChoice]",{"range":"166","text":"167"},[1187,1189],"[noOfQuestions]",[3177,3193],"[questionNumber, quizData.multipleChoiceQuestions, quizData.openEndedQuestions]",[947,949],"[lessonsurl]",[465,467],"[url]",[1098,1114],"[questionNumber, questionType, restoreAnswer, restoreMultipleChoice]"]